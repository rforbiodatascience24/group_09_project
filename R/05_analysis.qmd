---
title: "04_analysis"
author: "Andreis Marco"
format: html
editor: visual
---

# Load the dataset and required packages

```{r}

library(tidyverse)
library(vegan)

```

```{r}
# verify that the dataset can be loaded successfully
data_path <- "../data/06_dat_augmented.csv"
dataset <- read_csv(data_path, show_col_types = FALSE)
```

# Magnus analysis

### Metadata analysis

What does impaired glucose tolerance mean? It means that blood sugar levels are elevated but not enough to warrant a diagnosis of diabetes

```{r}
# Let's look at the proportions of our catagorical values
# Our data is well proportionally split between the three distincs groups of "disease"
dataset |> 
  count(glucose_tollerance, name = "Count") |> 
  arrange(desc(Count))

```

### Correlation analysis

Using the correlation matrix on a subset of our data will tell us about linear relationships between data variables.

Lets start with a subset of our data, containing metadata and a few high-level markers (e.g. LDL and HDL)

```{r}
# Filter for diabetics and impaired
filtered_data <- dataset |> 
  filter(glucose_tollerance %in% c("t2d", "impaired"))

# Choose the abundance data from the filtered data
df_selected <- filtered_data %>% select(starts_with("s_"))

# Calculate the mean of each column
mean_values <- df_selected %>%
  summarise(across(everything(), mean, na.rm = TRUE))

# Convert to long format and get the top 5 columns with the highest mean values
top_5_species <- mean_values %>%
  pivot_longer(everything(), names_to = "species", values_to = "mean_value") %>%
  arrange(desc(mean_value)) %>%
  slice_head(n = 5) |> 
  pull(species)

```

```{r}
corr_data <- dataset |> 
  select(age,
         bmi,
         ldl,
         hdl,
         'gad-antibodies',
         cholesterol,
         triglycerides,
         'c-peptide',
         all_of(top_5_species)
         )
# Normalize across columns
corr_normalized <- corr_data |> 
  mutate(across(everything(), ~ (. - mean(.)) / sd(.)))

# Compute the covariance matrix
cov_matrix <- (t(as.matrix(corr_normalized)) %*% as.matrix(corr_normalized)) / 
  (nrow(corr_normalized) - 1)

# Convert the covariance matrix to a correlation matrix
cor_matrix <- cov2cor(cov_matrix)

# Pivot the correlation matrix to long format
melted_cor_matrix <- as.data.frame(cor_matrix) |> 
  rownames_to_column(var = "Var1") |> 
  pivot_longer(-Var1, names_to = "Var2", values_to = "value")

# Plot values in colour squares to visualize correlation
ggplot(data = melted_cor_matrix, aes(x = Var1, y = Var2, fill = value)) +
  geom_tile() +
  geom_text(aes(label = round(value, 2)), color = "black", size = 2) +  # values
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, limit = c(-1, 1), space = "Lab", 
                       name = "Correlation") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, 
                                   size = 12, hjust = 1),
  axis.title.x = element_blank(),
  axis.title.y = element_blank())+

  coord_fixed()

```

We see a slight inverse relationship between HDL levels and BMI. This might not come as the biggest surprise. \[doi: 10.1586/erc.11.182\]

## Assessing relationships between species abundance and metadata features

### Let's analyze the diversity between class variables (T2d, healthy and glucose impaired)

We do this by calculating a distance matrix based on the microbial abundance data, which then can be used to visualize the differences in composition in a reduced dimensionality.

```{r}

# Pull the class labels as a vector 
group_labels <- dataset |> 
  pull(glucose_tollerance)

# Select abundance data from data set to calculate distsances 
abundance_data <- dataset |>
  select(matches("^s_"))

# Calculate Beta diversity based on Bray-Curtis distance
bc_dist <- vegdist((abundance_data), method = "bray")

# Perform PCoA on Bray-Curtis distance matrix
pcoa_result <- cmdscale(bc_dist, k = 2)  # k = 2 for 2D PCoA

# Combine PCoA results with metadata (group labels)
pcoa_df <- data.frame(PCoA1 = pcoa_result[, 1], PCoA2 = pcoa_result[, 2], Group = group_labels)

```

```{r}
# PCoA plot
ggplot(pcoa_df, aes(x = PCoA1, y = PCoA2, color = Group)) +
  geom_point(size = 4) +
  theme_minimal() +
  labs(title = "PCoA of Bray-Curtis Dissimilarity",
       x = "PCoA1", 
       y = "PCoA2") +
  scale_color_manual(values = c("red", "blue", "green"))
```

The plot does not show any indication of separation between groups.

# Rebecca analysis

```{r}
dataset |> 
  View()
```

```{r}
dataset |> 
  ggplot(mapping = aes(x = bmi,k__Archaea))+
  geom_point()
```

```{r}
library("table1")
dataset |> 
  table1(x = formula(~ bmi + k__Archaea + hdl + ldl | disease),
         data = _)
```

Linnaer regation

P-value (dabies vs not for HTL, ALDL)

```{r}
dataset_dia <- dataset |> 
  mutate(diabetes = case_when(disease == "healthy" ~ 0,
                              disease == "impaired_glucose_tolerance" ~ 1,
                              disease == "t2d" ~ 1) )
```

```{r}
dataset_dia_long <- dataset_dia |> 
  pivot_longer(cols = starts_with("k__"),
               names_to = "backteria",
               values_to = "level")
```

```{r}
dataset_dia_long_nested <- dataset_dia_long|> 
  group_by(backteria) |> 
  nest() |> 
  ungroup()
dataset_dia_long_nested
```

```{r}
#How to get the data
dataset_dia_long_nested |> 
  filter(backteria == "k__Archaea") |> 
  pull(data)
```

Fitting models

```{r}
dataset_dia_long_nested <- dataset_dia_long_nested |> 
  group_by(backteria) |> 
  mutate(model_object = map(.x = data,
                            .f = ~lm(level ~ diabetes,
                                     data = .x)))
```

```{r}
#How to get the model
dataset_dia_long_nested |> 
  filter(backteria == "k__Archaea") |> 
  pull(model_object)
```

```{r}
dataset_dia_long_nested <- dataset_dia_long_nested |> 
  mutate(model_object_tidy = map(.x = model_object,
                                 .f = ~tidy(x = .x,
                                            conf.int = TRUE,
                                            conf.level = 0.95)))
  
```

```{r}
#Eksampel how to get values
dataset_dia_long_nested |> 
  filter(backteria == "k__Archaea") |> 
  pull(model_object_tidy)
```

```{r}
dataset_dia_estimates <- dataset_dia_long_nested |> 
  unnest(model_object_tidy)
dataset_dia_est_estimates
```

```{r}
dataset_dia_estimates <- dataset_dia_estimates |> 
  select(backteria,p.value,estimate,conf.low,conf.high,p.value) |> 
  ungroup() |> 
  mutate(q.value = p.adjust(p.value),
         is_significant = case_when(q.value <= 0.05 ~ "yes",
                                    q.value > 0.05 ~ "no"))
dataset_dia_estimates |> 
  filter(is_significant == "yes")
```

```{r}
plot1_backteria <- dataset_dia_estimates |> 
  filter(is_significant == "yes") |> 
  ggplot(aes(x = estimate, y = fct_reorder(backteria, estimate), xmin = conf.low, xmax = conf.high)) +
  geom_vline(xintercept = 0) +
  geom_errorbarh() + geom_point() +
  theme_minimal(base_size = 16) +
  theme(plot.title = element_text(hjust = 1)) +
  labs(x = "Estimates (95%CIs)", y = "", title = "Backterie assoiat whit TC2", caption = "data bla") plot1_backteria
```
